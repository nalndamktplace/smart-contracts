/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface NalndaMarketplaceInterface extends utils.Interface {
  functions: {
    "ORDER(uint256)": FunctionFragment;
    "allowPublicBookCreation()": FunctionFragment;
    "approveBooks(address[])": FunctionFragment;
    "authorToBooks(address,uint256)": FunctionFragment;
    "authorizedBookCreator()": FunctionFragment;
    "bookOwner(address)": FunctionFragment;
    "book_implementation()": FunctionFragment;
    "buyCover(uint256)": FunctionFragment;
    "chainId()": FunctionFragment;
    "changePurchaseToken(address)": FunctionFragment;
    "changeSecondarySaleAfterDays(uint256)": FunctionFragment;
    "changeTransferAfterDays(uint256)": FunctionFragment;
    "computeNextBookAddress(address,string,uint256,uint256,uint256,uint256[])": FunctionFragment;
    "computeNextBooksAddresses(address[],string[],uint256[],uint256[],uint256[],uint256[][])": FunctionFragment;
    "createNewBook(address,string,uint256,uint256,uint256,uint256[])": FunctionFragment;
    "createNewBooks(address[],string[],uint256[],uint256[],uint256[],uint256[][])": FunctionFragment;
    "createdBooks(address)": FunctionFragment;
    "getNALNDABalance()": FunctionFragment;
    "lastOrderId()": FunctionFragment;
    "listCover(address,uint256,uint256)": FunctionFragment;
    "nalndaAirdrop()": FunctionFragment;
    "nalndaToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "publicBookCreationAllowed()": FunctionFragment;
    "purchaseToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "secondarySaleAfterDays()": FunctionFragment;
    "setAuthorizedBookCreator(address)": FunctionFragment;
    "totalBooksCreated()": FunctionFragment;
    "transferAfterDays()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unapproveBooks(address[])": FunctionFragment;
    "unlistCover(uint256)": FunctionFragment;
    "withdrawRevenue()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ORDER"
      | "allowPublicBookCreation"
      | "approveBooks"
      | "authorToBooks"
      | "authorizedBookCreator"
      | "bookOwner"
      | "book_implementation"
      | "buyCover"
      | "chainId"
      | "changePurchaseToken"
      | "changeSecondarySaleAfterDays"
      | "changeTransferAfterDays"
      | "computeNextBookAddress"
      | "computeNextBooksAddresses"
      | "createNewBook"
      | "createNewBooks"
      | "createdBooks"
      | "getNALNDABalance"
      | "lastOrderId"
      | "listCover"
      | "nalndaAirdrop"
      | "nalndaToken"
      | "owner"
      | "publicBookCreationAllowed"
      | "purchaseToken"
      | "renounceOwnership"
      | "secondarySaleAfterDays"
      | "setAuthorizedBookCreator"
      | "totalBooksCreated"
      | "transferAfterDays"
      | "transferOwnership"
      | "unapproveBooks"
      | "unlistCover"
      | "withdrawRevenue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ORDER",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowPublicBookCreation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveBooks",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "authorToBooks",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedBookCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bookOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "book_implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyCover",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changePurchaseToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSecondarySaleAfterDays",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTransferAfterDays",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeNextBookAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeNextBooksAddresses",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewBook",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewBooks",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createdBooks",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNALNDABalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listCover",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nalndaAirdrop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nalndaToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicBookCreationAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondarySaleAfterDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedBookCreator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBooksCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferAfterDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unapproveBooks",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistCover",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRevenue",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ORDER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowPublicBookCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorToBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedBookCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bookOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "book_implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyCover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changePurchaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSecondarySaleAfterDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTransferAfterDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeNextBookAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeNextBooksAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createdBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNALNDABalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listCover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nalndaAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nalndaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicBookCreationAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondarySaleAfterDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedBookCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBooksCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAfterDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unapproveBooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlistCover",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRevenue",
    data: BytesLike
  ): Result;

  events: {
    "CoverBought(uint256,address,uint256,address,uint256)": EventFragment;
    "CoverListed(uint256,address,address,uint256,uint256)": EventFragment;
    "CoverUnlisted(uint256,address,uint256,uint8)": EventFragment;
    "NewBookCreated(address,address,string,uint256,uint256,uint256[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RevenueWithdrawn(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CoverBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CoverListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CoverUnlisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBookCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueWithdrawn"): EventFragment;
}

export interface CoverBoughtEventObject {
  _orderId: BigNumber;
  _book: string;
  _tokenId: BigNumber;
  _buyer: string;
  _price: BigNumber;
}
export type CoverBoughtEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber],
  CoverBoughtEventObject
>;

export type CoverBoughtEventFilter = TypedEventFilter<CoverBoughtEvent>;

export interface CoverListedEventObject {
  _orderId: BigNumber;
  _lister: string;
  _book: string;
  _tokenId: BigNumber;
  _price: BigNumber;
}
export type CoverListedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  CoverListedEventObject
>;

export type CoverListedEventFilter = TypedEventFilter<CoverListedEvent>;

export interface CoverUnlistedEventObject {
  _orderId: BigNumber;
  _book: string;
  _tokenId: BigNumber;
  _unlistedStage: number;
}
export type CoverUnlistedEvent = TypedEvent<
  [BigNumber, string, BigNumber, number],
  CoverUnlistedEventObject
>;

export type CoverUnlistedEventFilter = TypedEventFilter<CoverUnlistedEvent>;

export interface NewBookCreatedEventObject {
  _author: string;
  _bookAddress: string;
  _coverURI: string;
  _price: BigNumber;
  _lang: BigNumber;
  _genre: BigNumber[];
}
export type NewBookCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber[]],
  NewBookCreatedEventObject
>;

export type NewBookCreatedEventFilter = TypedEventFilter<NewBookCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RevenueWithdrawnEventObject {
  _revenueWithdrawn: BigNumber;
}
export type RevenueWithdrawnEvent = TypedEvent<
  [BigNumber],
  RevenueWithdrawnEventObject
>;

export type RevenueWithdrawnEventFilter =
  TypedEventFilter<RevenueWithdrawnEvent>;

export interface NalndaMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NalndaMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ORDER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, string, BigNumber, BigNumber] & {
        stage: number;
        orderId: BigNumber;
        seller: string;
        book: string;
        tokenId: BigNumber;
        price: BigNumber;
      }
    >;

    allowPublicBookCreation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approveBooks(
      _books: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorToBooks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    authorizedBookCreator(overrides?: CallOverrides): Promise<[string]>;

    bookOwner(
      _book: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { author: string }>;

    book_implementation(overrides?: CallOverrides): Promise<[string]>;

    buyCover(
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    changePurchaseToken(
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeSecondarySaleAfterDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeTransferAfterDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeNextBookAddress(
      _author: PromiseOrValue<string>,
      _coverURI: PromiseOrValue<string>,
      _initialPrice: PromiseOrValue<BigNumberish>,
      _daysForSecondarySales: PromiseOrValue<BigNumberish>,
      _lang: PromiseOrValue<BigNumberish>,
      _genre: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[string] & { _estimatedAddress: string }>;

    computeNextBooksAddresses(
      _author: PromiseOrValue<string>[],
      _coverURI: PromiseOrValue<string>[],
      _initialPrice: PromiseOrValue<BigNumberish>[],
      _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
      _lang: PromiseOrValue<BigNumberish>[],
      _genre: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    createNewBook(
      _author: PromiseOrValue<string>,
      _coverURI: PromiseOrValue<string>,
      _initialPrice: PromiseOrValue<BigNumberish>,
      _daysForSecondarySales: PromiseOrValue<BigNumberish>,
      _lang: PromiseOrValue<BigNumberish>,
      _genre: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNewBooks(
      _author: PromiseOrValue<string>[],
      _coverURI: PromiseOrValue<string>[],
      _initialPrice: PromiseOrValue<BigNumberish>[],
      _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
      _lang: PromiseOrValue<BigNumberish>[],
      _genre: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createdBooks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNALNDABalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bal: BigNumber }>;

    lastOrderId(overrides?: CallOverrides): Promise<[BigNumber]>;

    listCover(
      _book: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nalndaAirdrop(overrides?: CallOverrides): Promise<[string]>;

    nalndaToken(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publicBookCreationAllowed(overrides?: CallOverrides): Promise<[boolean]>;

    purchaseToken(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    secondarySaleAfterDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAuthorizedBookCreator(
      _newCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBooksCreated(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferAfterDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unapproveBooks(
      _books: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlistCover(
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ORDER(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string, string, BigNumber, BigNumber] & {
      stage: number;
      orderId: BigNumber;
      seller: string;
      book: string;
      tokenId: BigNumber;
      price: BigNumber;
    }
  >;

  allowPublicBookCreation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approveBooks(
    _books: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorToBooks(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  authorizedBookCreator(overrides?: CallOverrides): Promise<string>;

  bookOwner(
    _book: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  book_implementation(overrides?: CallOverrides): Promise<string>;

  buyCover(
    _orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  changePurchaseToken(
    _newToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeSecondarySaleAfterDays(
    _days: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeTransferAfterDays(
    _days: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeNextBookAddress(
    _author: PromiseOrValue<string>,
    _coverURI: PromiseOrValue<string>,
    _initialPrice: PromiseOrValue<BigNumberish>,
    _daysForSecondarySales: PromiseOrValue<BigNumberish>,
    _lang: PromiseOrValue<BigNumberish>,
    _genre: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<string>;

  computeNextBooksAddresses(
    _author: PromiseOrValue<string>[],
    _coverURI: PromiseOrValue<string>[],
    _initialPrice: PromiseOrValue<BigNumberish>[],
    _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
    _lang: PromiseOrValue<BigNumberish>[],
    _genre: PromiseOrValue<BigNumberish>[][],
    overrides?: CallOverrides
  ): Promise<string[]>;

  createNewBook(
    _author: PromiseOrValue<string>,
    _coverURI: PromiseOrValue<string>,
    _initialPrice: PromiseOrValue<BigNumberish>,
    _daysForSecondarySales: PromiseOrValue<BigNumberish>,
    _lang: PromiseOrValue<BigNumberish>,
    _genre: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNewBooks(
    _author: PromiseOrValue<string>[],
    _coverURI: PromiseOrValue<string>[],
    _initialPrice: PromiseOrValue<BigNumberish>[],
    _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
    _lang: PromiseOrValue<BigNumberish>[],
    _genre: PromiseOrValue<BigNumberish>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createdBooks(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNALNDABalance(overrides?: CallOverrides): Promise<BigNumber>;

  lastOrderId(overrides?: CallOverrides): Promise<BigNumber>;

  listCover(
    _book: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nalndaAirdrop(overrides?: CallOverrides): Promise<string>;

  nalndaToken(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  publicBookCreationAllowed(overrides?: CallOverrides): Promise<boolean>;

  purchaseToken(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  secondarySaleAfterDays(overrides?: CallOverrides): Promise<BigNumber>;

  setAuthorizedBookCreator(
    _newCreator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBooksCreated(overrides?: CallOverrides): Promise<BigNumber>;

  transferAfterDays(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unapproveBooks(
    _books: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlistCover(
    _orderId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawRevenue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ORDER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string, string, BigNumber, BigNumber] & {
        stage: number;
        orderId: BigNumber;
        seller: string;
        book: string;
        tokenId: BigNumber;
        price: BigNumber;
      }
    >;

    allowPublicBookCreation(overrides?: CallOverrides): Promise<void>;

    approveBooks(
      _books: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    authorToBooks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    authorizedBookCreator(overrides?: CallOverrides): Promise<string>;

    bookOwner(
      _book: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    book_implementation(overrides?: CallOverrides): Promise<string>;

    buyCover(
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    changePurchaseToken(
      _newToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSecondarySaleAfterDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTransferAfterDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeNextBookAddress(
      _author: PromiseOrValue<string>,
      _coverURI: PromiseOrValue<string>,
      _initialPrice: PromiseOrValue<BigNumberish>,
      _daysForSecondarySales: PromiseOrValue<BigNumberish>,
      _lang: PromiseOrValue<BigNumberish>,
      _genre: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string>;

    computeNextBooksAddresses(
      _author: PromiseOrValue<string>[],
      _coverURI: PromiseOrValue<string>[],
      _initialPrice: PromiseOrValue<BigNumberish>[],
      _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
      _lang: PromiseOrValue<BigNumberish>[],
      _genre: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<string[]>;

    createNewBook(
      _author: PromiseOrValue<string>,
      _coverURI: PromiseOrValue<string>,
      _initialPrice: PromiseOrValue<BigNumberish>,
      _daysForSecondarySales: PromiseOrValue<BigNumberish>,
      _lang: PromiseOrValue<BigNumberish>,
      _genre: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createNewBooks(
      _author: PromiseOrValue<string>[],
      _coverURI: PromiseOrValue<string>[],
      _initialPrice: PromiseOrValue<BigNumberish>[],
      _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
      _lang: PromiseOrValue<BigNumberish>[],
      _genre: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    createdBooks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNALNDABalance(overrides?: CallOverrides): Promise<BigNumber>;

    lastOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    listCover(
      _book: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    nalndaAirdrop(overrides?: CallOverrides): Promise<string>;

    nalndaToken(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    publicBookCreationAllowed(overrides?: CallOverrides): Promise<boolean>;

    purchaseToken(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    secondarySaleAfterDays(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthorizedBookCreator(
      _newCreator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBooksCreated(overrides?: CallOverrides): Promise<BigNumber>;

    transferAfterDays(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unapproveBooks(
      _books: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    unlistCover(
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRevenue(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CoverBought(uint256,address,uint256,address,uint256)"(
      _orderId?: PromiseOrValue<BigNumberish> | null,
      _book?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _buyer?: null,
      _price?: null
    ): CoverBoughtEventFilter;
    CoverBought(
      _orderId?: PromiseOrValue<BigNumberish> | null,
      _book?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _buyer?: null,
      _price?: null
    ): CoverBoughtEventFilter;

    "CoverListed(uint256,address,address,uint256,uint256)"(
      _orderId?: PromiseOrValue<BigNumberish> | null,
      _lister?: null,
      _book?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _price?: null
    ): CoverListedEventFilter;
    CoverListed(
      _orderId?: PromiseOrValue<BigNumberish> | null,
      _lister?: null,
      _book?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _price?: null
    ): CoverListedEventFilter;

    "CoverUnlisted(uint256,address,uint256,uint8)"(
      _orderId?: PromiseOrValue<BigNumberish> | null,
      _book?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _unlistedStage?: null
    ): CoverUnlistedEventFilter;
    CoverUnlisted(
      _orderId?: PromiseOrValue<BigNumberish> | null,
      _book?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _unlistedStage?: null
    ): CoverUnlistedEventFilter;

    "NewBookCreated(address,address,string,uint256,uint256,uint256[])"(
      _author?: PromiseOrValue<string> | null,
      _bookAddress?: null,
      _coverURI?: null,
      _price?: null,
      _lang?: null,
      _genre?: null
    ): NewBookCreatedEventFilter;
    NewBookCreated(
      _author?: PromiseOrValue<string> | null,
      _bookAddress?: null,
      _coverURI?: null,
      _price?: null,
      _lang?: null,
      _genre?: null
    ): NewBookCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RevenueWithdrawn(uint256)"(
      _revenueWithdrawn?: null
    ): RevenueWithdrawnEventFilter;
    RevenueWithdrawn(_revenueWithdrawn?: null): RevenueWithdrawnEventFilter;
  };

  estimateGas: {
    ORDER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowPublicBookCreation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approveBooks(
      _books: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorToBooks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizedBookCreator(overrides?: CallOverrides): Promise<BigNumber>;

    bookOwner(
      _book: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    book_implementation(overrides?: CallOverrides): Promise<BigNumber>;

    buyCover(
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    changePurchaseToken(
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeSecondarySaleAfterDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeTransferAfterDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeNextBookAddress(
      _author: PromiseOrValue<string>,
      _coverURI: PromiseOrValue<string>,
      _initialPrice: PromiseOrValue<BigNumberish>,
      _daysForSecondarySales: PromiseOrValue<BigNumberish>,
      _lang: PromiseOrValue<BigNumberish>,
      _genre: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeNextBooksAddresses(
      _author: PromiseOrValue<string>[],
      _coverURI: PromiseOrValue<string>[],
      _initialPrice: PromiseOrValue<BigNumberish>[],
      _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
      _lang: PromiseOrValue<BigNumberish>[],
      _genre: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createNewBook(
      _author: PromiseOrValue<string>,
      _coverURI: PromiseOrValue<string>,
      _initialPrice: PromiseOrValue<BigNumberish>,
      _daysForSecondarySales: PromiseOrValue<BigNumberish>,
      _lang: PromiseOrValue<BigNumberish>,
      _genre: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNewBooks(
      _author: PromiseOrValue<string>[],
      _coverURI: PromiseOrValue<string>[],
      _initialPrice: PromiseOrValue<BigNumberish>[],
      _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
      _lang: PromiseOrValue<BigNumberish>[],
      _genre: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createdBooks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNALNDABalance(overrides?: CallOverrides): Promise<BigNumber>;

    lastOrderId(overrides?: CallOverrides): Promise<BigNumber>;

    listCover(
      _book: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nalndaAirdrop(overrides?: CallOverrides): Promise<BigNumber>;

    nalndaToken(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publicBookCreationAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    secondarySaleAfterDays(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthorizedBookCreator(
      _newCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBooksCreated(overrides?: CallOverrides): Promise<BigNumber>;

    transferAfterDays(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unapproveBooks(
      _books: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlistCover(
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ORDER(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowPublicBookCreation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approveBooks(
      _books: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorToBooks(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizedBookCreator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bookOwner(
      _book: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    book_implementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyCover(
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changePurchaseToken(
      _newToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeSecondarySaleAfterDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeTransferAfterDays(
      _days: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeNextBookAddress(
      _author: PromiseOrValue<string>,
      _coverURI: PromiseOrValue<string>,
      _initialPrice: PromiseOrValue<BigNumberish>,
      _daysForSecondarySales: PromiseOrValue<BigNumberish>,
      _lang: PromiseOrValue<BigNumberish>,
      _genre: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeNextBooksAddresses(
      _author: PromiseOrValue<string>[],
      _coverURI: PromiseOrValue<string>[],
      _initialPrice: PromiseOrValue<BigNumberish>[],
      _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
      _lang: PromiseOrValue<BigNumberish>[],
      _genre: PromiseOrValue<BigNumberish>[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewBook(
      _author: PromiseOrValue<string>,
      _coverURI: PromiseOrValue<string>,
      _initialPrice: PromiseOrValue<BigNumberish>,
      _daysForSecondarySales: PromiseOrValue<BigNumberish>,
      _lang: PromiseOrValue<BigNumberish>,
      _genre: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNewBooks(
      _author: PromiseOrValue<string>[],
      _coverURI: PromiseOrValue<string>[],
      _initialPrice: PromiseOrValue<BigNumberish>[],
      _daysForSecondarySales: PromiseOrValue<BigNumberish>[],
      _lang: PromiseOrValue<BigNumberish>[],
      _genre: PromiseOrValue<BigNumberish>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createdBooks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNALNDABalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastOrderId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listCover(
      _book: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nalndaAirdrop(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nalndaToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicBookCreationAllowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchaseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    secondarySaleAfterDays(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthorizedBookCreator(
      _newCreator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBooksCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferAfterDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unapproveBooks(
      _books: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlistCover(
      _orderId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockUSDT,
  MockUSDTInterface,
} from "../../../../contracts/tokens/mockUSDT.sol/MockUSDT";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346102eb576040906001600160401b0390808301828111828210176101f75783526009815260209168135bd8dac81554d11560ba1b838301528351848101818110838211176101f757855260088152671b5bd8dad554d11560c21b8482015282518281116101f7576003918254916001958684811c941680156102e1575b888510146102cb578190601f9485811161027a575b5088908583116001146102185760009261020d575b505060001982861b1c191690861b1783555b80519384116101f75760049586548681811c911680156101ed575b828210146101d857838111610192575b5080928511600114610129575093839491849260009561011e575b50501b92600019911b1c19161790555b5161070290816102f18239f35b015193503880610101565b92919084601f1981168860005285600020956000905b89838310610178575050501061015e575b50505050811b019055610111565b01519060f884600019921b161c1916905538808080610150565b85870151895590970196948501948893509081019061013f565b87600052816000208480880160051c8201928489106101cf575b0160051c019087905b8281106101c35750506100e6565b600081550187906101b5565b925081926101ac565b602288634e487b7160e01b6000525260246000fd5b90607f16906100d6565b634e487b7160e01b600052604160045260246000fd5b0151905038806100a9565b90889350601f19831691876000528a6000209260005b8c828210610264575050841161024c575b505050811b0183556100bb565b015160001983881b60f8161c1916905538808061023f565b8385015186558c9790950194938401930161022e565b90915085600052886000208580850160051c8201928b86106102c2575b918a91869594930160051c01915b8281106102b3575050610094565b600081558594508a91016102a5565b92508192610297565b634e487b7160e01b600052602260045260246000fd5b93607f169361007f565b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146104a157508163095ea7b3146103f757816318160ddd146103d857816323b872dd146102eb578163313ce567146102cf57816370a082311461029857816395d89b4114610195578163a0712d681461010e57508063a9059cbb146100de5763dd62ed3e1461009357600080fd5b346100da57806003193601126100da57806020926100af6105a6565b6100b76105c1565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100da57806003193601126100da576020906101076100fd6105a6565b60243590336105f5565b5160018152f35b9190503461019157602036600319011261019157813591331561017c576002549083820180921161016957506002553383528260205280832082815401905551908152816000805160206106ad83398151915260203393a380f35b634e487b7160e01b855260119052602484fd5b83602492519163ec442f0560e01b8352820152fd5b8280fd5b8383346100da57816003193601126100da5780519082845460018160011c906001831692831561028e575b602093848410811461027b5783885290811561025f5750600114610227575b505050829003601f01601f19168201926001600160401b03841183851017610214575082918261021092528261055d565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b83851061024b57505050508301018580806101df565b805488860183015293019284908201610235565b60ff1916878501525050151560051b84010190508580806101df565b634e487b7160e01b895260228a52602489fd5b91607f16916101c0565b5050346100da5760203660031901126100da5760209181906001600160a01b036102c06105a6565b16815280845220549051908152f35b5050346100da57816003193601126100da576020905160068152f35b905082346103d55760603660031901126103d5576103076105a6565b61030f6105c1565b916044359360018060a01b03831680835260016020528683203384526020528683205491600019830361034b575b6020886101078989896105f5565b8683106103b357811561039c573315610385575082526001602090815286832033845281529186902090859003905582906101078761033d565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b90506103d1868851938493637dc7a0d960e11b8552339085016105d7565b0390fd5b80fd5b5050346100da57816003193601126100da576020906002549051908152f35b9050346101915781600319360112610191576104116105a6565b60243590331561048a576001600160a01b031691821561047357508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849084346101915782600319360112610191578260035460018160011c9060018316928315610553575b602093848410811461027b5783885290811561025f575060011461051a57505050829003601f01601f19168201926001600160401b03841183851017610214575082918261021092528261055d565b91925060038652828620918387935b83851061053f57505050508301018580806101df565b805488860183015293019284908201610529565b91607f16916104cb565b6020808252825181830181905290939260005b82811061059257505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610570565b600435906001600160a01b03821682036105bc57565b600080fd5b602435906001600160a01b03821682036105bc57565b604091949392606082019560018060a01b0316825260208201520152565b916001600160a01b03808416928315610693571692831561067a576000908382528160205260408220549083821061065d575091604082826000805160206106ad833981519152958760209652828652038282205586815220818154019055604051908152a3565b6103d18460405193849363391434e360e21b8552600485016105d7565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220b68576ce8298b8b66b7ab61b275afac05a66a50f3cb05bc6c2333e71ecfe009664736f6c63430008190033";

type MockUSDTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUSDTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUSDT__factory extends ContractFactory {
  constructor(...args: MockUSDTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockUSDT> {
    return super.deploy(overrides || {}) as Promise<MockUSDT>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockUSDT {
    return super.attach(address) as MockUSDT;
  }
  override connect(signer: Signer): MockUSDT__factory {
    return super.connect(signer) as MockUSDT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUSDTInterface {
    return new utils.Interface(_abi) as MockUSDTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUSDT {
    return new Contract(address, _abi, signerOrProvider) as MockUSDT;
  }
}
